{"ast":null,"code":"export var fetchHasErrored = function fetchHasErrored(bool) {\n  return {\n    type: 'FETCH_HAS_ERRORED',\n    hasErrored: bool\n  };\n};\nexport var fetchIsLoading = function fetchIsLoading(bool) {\n  return {\n    type: 'FETCH_IS_LOADING',\n    isLoading: bool\n  };\n};\nexport var fetchUserSuccess = function fetchUserSuccess(user) {\n  return {\n    type: 'FETCH_USER_SUCCESS',\n    user: user\n  };\n};\nexport var storeToken = function storeToken(access_token) {\n  return {\n    type: 'STORE_TOKEN',\n    token: access_token\n  };\n};\nexport var storeSleepData = function storeSleepData(data) {\n  return {\n    type: 'STORE_SLEEP',\n    data: data\n  };\n};\nexport var setGoalDate = function setGoalDate(date) {\n  return {\n    type: 'SET_GOAL_DATE',\n    goalDate: date\n  };\n};\nexport var setBedtime = function setBedtime(time) {\n  return {\n    type: 'SET_BEDTIME',\n    bedtimeTarget: time\n  };\n};\nexport var setWakeupTime = function setWakeupTime(time) {\n  return {\n    type: 'SET_WAKEUP_TIME',\n    wakeupTarget: time\n  };\n}; // <--- redux thunk here --->\n\nexport var fetchUserData = function fetchUserData(url, token) {\n  return function (dispatch) {\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (user) {\n      return dispatch(fetchUserSuccess(user));\n    }).catch(function () {\n      return dispatch(fetchHasErrored(true));\n    });\n  };\n};\nexport var fetchSleepData = function fetchSleepData(url, token) {\n  return function (dispatch) {\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch(storeSleepData(data));\n    }).catch(function () {\n      return dispatch(fetchHasErrored(true));\n    });\n  };\n};\nexport var fetchSleepGoals = function fetchSleepGoals(goalDate, bedtimeTarget, wakeupTarget, token) {\n  return function (dispatch) {\n    fetch('http://localhost:3000/api/v1/goals', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n      body: JSON.stringify({\n        goalDate: goalDate,\n        bedtimeTarget: bedtimeTarget,\n        wakeupTarget: wakeupTarget\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch(setGoalDate(data));\n    }).catch(console.error);\n  };\n};","map":{"version":3,"sources":["/Users/dianayoo/Documents/FlatironSchool/JS/Mod-5-Final-Project/frontend_sleepTracker/src/actionCreators/userActions.js"],"names":["fetchHasErrored","bool","type","hasErrored","fetchIsLoading","isLoading","fetchUserSuccess","user","storeToken","access_token","token","storeSleepData","data","setGoalDate","date","goalDate","setBedtime","time","bedtimeTarget","setWakeupTime","wakeupTarget","fetchUserData","url","dispatch","fetch","method","headers","then","res","json","catch","fetchSleepData","fetchSleepGoals","body","JSON","stringify","console","error"],"mappings":"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","sourcesContent":["export const fetchHasErrored = (bool) => {\n  return {\n    type: 'FETCH_HAS_ERRORED',\n    hasErrored: bool\n  }\n}\n\nexport const fetchIsLoading = (bool) => {\n  return {\n    type: 'FETCH_IS_LOADING',\n    isLoading: bool\n  }\n}\n\nexport const fetchUserSuccess = (user) => {\n  return {\n    type: 'FETCH_USER_SUCCESS',\n    user\n  }\n}\n\nexport const storeToken = (access_token) => {\n  return {\n    type: 'STORE_TOKEN',\n    token: access_token\n  }\n}\n\nexport const storeSleepData = (data) => {\n  return {\n    type: 'STORE_SLEEP',\n    data\n  }\n}\n\nexport const setGoalDate = (date) => {\n  return {\n    type: 'SET_GOAL_DATE',\n    goalDate: date\n  }\n}\n\nexport const setBedtime = (time) => {\n  return {\n    type: 'SET_BEDTIME',\n    bedtimeTarget: time\n  }\n}\n\nexport const setWakeupTime = (time) => {\n  return {\n    type: 'SET_WAKEUP_TIME',\n    wakeupTarget: time\n  }\n}\n\n\n// <--- redux thunk here --->\n\nexport const fetchUserData = (url, token) => {\n    return (dispatch) => {\n      fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        }\n      })\n        .then(res => res.json())\n        .then(user => dispatch(fetchUserSuccess(user)))\n        .catch(() => dispatch(fetchHasErrored(true)))\n    }\n}\n\nexport const fetchSleepData = (url, token) => {\n    return (dispatch) => {\n      fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        }\n      })\n        .then(res => res.json())\n        .then(data => {\n          dispatch(storeSleepData(data))})\n        .catch(() => dispatch(fetchHasErrored(true)))\n    }\n}\n\nexport const fetchSleepGoals = (goalDate, bedtimeTarget, wakeupTarget, token) => {\n    return (dispatch) => {\n      fetch('http://localhost:3000/api/v1/goals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify({\n          goalDate: goalDate,\n          bedtimeTarget: bedtimeTarget,\n          wakeupTarget: wakeupTarget\n        })\n      })\n        .then(res => res.json())\n        .then(data => {\n          dispatch(setGoalDate(data))\n        })\n        .catch(console.error)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}